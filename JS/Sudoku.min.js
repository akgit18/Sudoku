let _size=3;const inpStringC1="<input inputmode='numeric' size='1' maxlength='2' autocomplete='off' class='col1'>",inpStringC2="<input inputmode='numeric' size='1' maxlength='2' autocomplete='off' class='col2'>";let inpPicker=!1;const table=document.getElementById("board"),defaultMap=new Map;function inpPick(){return inpPicker?inpStringC1:inpStringC2}function boardgen(){for(let e=0;e<_size**2;e++){let t=table.insertRow(e);e%_size==0&&(inpPicker=!inpPicker);for(let r=0;r<_size**2;r++)(r>0||_size%2==0)&&r%_size==0&&(inpPicker=!inpPicker),t.insertCell(r).innerHTML=inpPick(),defaultMap.set(100*e+r,setify(e,r))}inpPicker=!1}function boardclear(){confirm("Are you sure? This will erase any data you have currently entered.")&&(table.removeChild(document.getElementsByTagName("tbody")[0]),boardgen())}function reSize(e,t){confirm("Are you sure? This will erase any data you have currently entered.")?(_size=t,table.removeChild(document.getElementsByTagName("tbody")[0]),boardgen()):e.value=_size}document.body.onload=()=>{boardgen(),document.getElementById("cboard").onclick=()=>boardclear(),document.getElementById("sboard").onclick=()=>sudokize()};var rules=[rowcolumn,boxrule],permaBoard;function solve1(){let e=getBoard();if(!isLegalAll(e))throw new Error("Inputted board not valid.");if(sq=nextEmptySpace(e)){let t=solveHelper(e,sq[0],sq[1]);if(t)return t;throw new Error("Unsolvable board.")}}function solveHelper(e,t,r){let o=!1;for(let n=1;n<_size**2+1;n++)if(e[t][r]=n,isLegalSpace(e,t,r)){if(!(sq=nextEmptySpace(e)))return permaBoard=e,!0;if(o=solveHelper(e,sq[0],sq[1]),o)return!0}return e[t][r]=-1,!1}function getBoard(){var e=document.getElementById("board"),t=[];for(let r=0;r<_size**2;r++){let o=e.rows[r],n=[];for(let e=0;e<_size**2;e++){let t=o.cells[e].children[0].value;t>0?n.push(Number(t)):n.push(-1)}t.push(n)}return t}function isLegalAll(e,t=null){if(t){for(const r of t)if(!isLegalSpace(e,r[0],r[1]))return!1}else for(i=0;i<_size*_size;i++)for(j=0;j<_size*_size;j++)if(!isLegalSpace(e,i,j))return!1;return!0}function isLegalSpace(e,t,r){let o=e[t][r];if(o>_size**2)throw new Error(`Value ${o} on row ${t+1}, column ${r+1} too large.`);if(o>0)for(const n of rules)if(!n(e,t,r,o))return!1;return!0}function rowcolumn(e,t,r,o){for(let n=0;n<_size*_size;n++)if(o==e[n][r]&&n!=t||o==e[t][n]&&n!=r)return!1;return!0}function boxrule(e,t,r,o){let n=Math.floor(t/_size)*_size,i=Math.floor(r/_size)*_size;for(let o=0;o<_size;o++)for(let l=0;l<_size;l++)if((o+n!=t||l+i!=r)&&e[o+n][l+i]==e[t][r])return!1;return!0}function knightsmove(e,t,r,o){let n=[-2,-2,-1,-1,1,1,2,2],i=[-1,1,-2,2,-2,2,-1,1];for(let l=0;l<8;l++){let s=t+n[l],a=r+i[l];if(0<=s&&s<_size**2&&0<=a&&a<_size**2&&o==e[s][a])return!1}return!0}function kingsmove(e,t,r,o){let n=[-1,-1,-1,0,0,1,1,1],i=[-1,0,1,-1,1,-1,0,1];for(let l=0;l<8;l++){let s=t+n[l],a=r+i[l];if(0<=s&&s<_size**2&&0<=a&&a<_size**2&&o==e[s][a])return!1}return!0}function orthoplus(e,t,r,o){let n=[-1,0,0,1],i=[0,-1,1,0];for(let l=0;l<4;l++){let s=t+n[l],a=r+i[l];if(0<=s&&s<_size**2&&0<=a&&a<_size**2&&(o+1==e[s][a]||o-1==e[s][a]))return!1}return!0}function toggleRule(e,t){let r,o=t.value;switch(t.checked?(e.className="col2",r=function(e){rules.push(e)}):(e.className="lb1",r=function(e){rules.splice(rules.indexOf(e),1)}),o){case"1":r(knightsmove);break;case"2":r(kingsmove);break;case"3":r(orthoplus);break;default:alert("Uh-oh! Something broke!")}}function nextEmptySpace(e){for(let t=0;t<_size**2;t++)for(let r=0;r<_size**2;r++)if(e[t][r]<1)return[t,r];return!1}var solver=solve1;function sudokize(){try{solver(),putBoard()}catch(e){alert(e),console.log(e)}}function putBoard(e=permaBoard){for(let t=0;t<_size**2;t++){let r=table.rows[t];for(let o=0;o<_size**2;o++)r.cells[o].children[0].value=e[t][o]}}function useSolver(s){solver=eval(s)}function solve2(){setTimeout(localSearch(),1e4)}function localSearch(){let e,t=getBoard();if(!isLegalAll(t))throw new Error("Inputted board not valid.");let r,o=[];for(;e=nextEmptySpace(t);)t[e[0]][e[1]]=minViolatingOption(t,e[0],e[1]),o.push(e);let n=1e3*2**_size;for(let e=0;e<n;e++){r=0,putBoard(t);let e=o[Math.floor(Math.random()*o.length)];if((r=numViolationsSpace(t,e[0],e[1]))&&(t[e[0]][e[1]]=minViolatingOption(t,e[0],e[1])),isLegalAll(t,o))return void(permaBoard=t)}throw new Error(`${n} iterations exceeded without finding a solution.`)}function numViolationsSpace(e,t,r,o=e[t][r]){if(o>_size**2)throw new Error(`Value ${o} on row ${t+1}, column ${r+1} too large.`);let n=0;if(o>0)for(const i of defaultMap.get(100*t+r))o==e[i[0]][i[1]]&&n++;return n}function minViolatingOption(e,t,r){maxval=_size**2;let o=1,n=1/0;for(let i=1;i<=maxval;i++){let l=numViolationsSpace(e,t,r,i);l<n&&(n=l,o=i)}return o}function boxSq(e,t){let r=[],o=Math.floor(e/_size)*_size,n=Math.floor(t/_size)*_size;for(let i=0;i<_size;i++)for(let l=0;l<_size;l++)i+o==e&&l+n==t||r.push([i+o,l+n]);return r}function rowcolumnSq(e,t){let r=[];for(let o=0;o<_size**2;o++)o!=e&&r.push([o,t]),o!=t&&r.push([e,o]);return r}function setify(e,t){let r=boxSq(e,t),o=rowcolumnSq(e,t);return new Set(r.concat(o))}
